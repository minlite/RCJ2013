
AVRASM ver. 2.1.30  D:\Robotics\SoccerJun2\src\List\main.asm Thu Mar 21 13:04:11 2013

D:\Robotics\SoccerJun2\src\List\main.asm(1059): warning: Register r4 already defined by the .DEF directive
D:\Robotics\SoccerJun2\src\List\main.asm(1060): warning: Register r6 already defined by the .DEF directive
D:\Robotics\SoccerJun2\src\List\main.asm(1061): warning: Register r8 already defined by the .DEF directive
D:\Robotics\SoccerJun2\src\List\main.asm(1062): warning: Register r13 already defined by the .DEF directive
D:\Robotics\SoccerJun2\src\List\main.asm(1063): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 10.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _lcd_enabled=R4
                 	.DEF _rc=R6
                 	.DEF _i=R8
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0056 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
D:\Robotics\SoccerJun2\src\List\main.asm(1101): warning: .cseg .db misalignment - padding zero byte
000033 0001      	.DB  0x1
                 _0x4:
D:\Robotics\SoccerJun2\src\List\main.asm(1103): warning: .cseg .db misalignment - padding zero byte
000034 0001      	.DB  0x1
                 _0x3B:
000035 0000      	.DB  0x0,0x0
                 _0x0:
000036 6425
000037 4200
000038 4755
000039 6f20      	.DB  0x25,0x64,0x0,0x42,0x55,0x47,0x20,0x6F
00003a 3a6e
00003b 0020      	.DB  0x6E,0x3A,0x20,0x0
                 _0x2020060:
D:\Robotics\SoccerJun2\src\List\main.asm(1110): warning: .cseg .db misalignment - padding zero byte
00003c 0001      	.DB  0x1
                 _0x2020000:
00003d 4e2d
00003e 4e41
00003f 4900
000040 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Robotics\SoccerJun2\src\List\main.asm(1113): warning: .cseg .db misalignment - padding zero byte
000041 0000      	.DB  0x0
                 _0x2040003:
000042 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000043 0001      	.DW  0x01
000044 0169      	.DW  _workingSensors
000045 0066      	.DW  _0x3*2
                 
000046 0001      	.DW  0x01
000047 018d      	.DW  _sensors
000048 0068      	.DW  _0x4*2
                 
000049 0009      	.DW  0x09
00004a 0160      	.DW  _0x20
00004b 006f      	.DW  _0x0*2+3
                 
00004c 0002      	.DW  0x02
00004d 0004      	.DW  0x04
00004e 006a      	.DW  _0x3B*2
                 
00004f 0001      	.DW  0x01
000050 01b1      	.DW  __seed_G101
000051 0078      	.DW  _0x2020060*2
                 
000052 0002      	.DW  0x02
000053 01b5      	.DW  __base_y_G102
000054 0084      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
000055 0000      	.DW  0
                 
                 __RESET:
000056 94f8      	CLI
000057 27ee      	CLR  R30
000058 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000059 e0f1      	LDI  R31,1
00005a bffb      	OUT  GICR,R31
00005b bfeb      	OUT  GICR,R30
00005c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005d e1f8      	LDI  R31,0x18
00005e bdf1      	OUT  WDTCR,R31
00005f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000067 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000068 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 940c 0086 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project : AMOS Robocup Junior Soccer 2013
                 ;Version : 3
                 ;Date    : 3/17/2013
                 ;Author  : Miro Markarian and AMOS team
                 ;Company : AMOS
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 10.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x18 ;PORTB
                    .equ __sda_bit=0
                    .equ __scl_bit=1
                 ; 0000 0019 #endasm
                 ;#include <i2c.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;/* MUX ADDRESS */
                 ;#define MUXA PORTA.6
                 ;#define MUXB PORTA.7
                 ;#define MUXC PORTD.6
                 ;#define MUXD PORTD.7
                 ;
                 ;/* MUX OUT */
                 ;#define MUXOA PINA.4
                 ;#define MUXOB PINA.5
                 ;
                 ;
                 ;/* MUX PINS*/
                 ;#define LCD 15
                 ;#define STRICT 14
                 ;
                 ;/* Switches varibles */
                 ;int lcd_enabled = 0;
                 ;//int strict_set = 0;
                 ;
                 ;/* Define function prototypes so we can use this functions globally */
                 ;int init_robot();
                 ;void write_int(int x, int y, int value);
                 ;void set_mux(int pin);
                 ;int init_sensors();
                 ;void init_switches();
                 ;void bug(int error);
                 ;void checksensors();
                 ;float getMovement();
                 ;
                 ;void lcd_writeint(int x, int y, int value);
                 ;
                 ;/* Define global variables */
                 ;
                 ;int rc; // Return Condition
                 ;int workingSensors[18] = {1}; // Working Sensors Array
                 
                 	.DSEG
                 ;int sensors[18] = {1}; // Sensor Values Array
                 ;int i; // For loop iterator
                 ;float move;
                 ;void main(void)
                 ; 0000 004B {
                 
                 	.CSEG
                 _main:
                 ; 0000 004C // Declare your local variables here
                 ; 0000 004D 
                 ; 0000 004E // Input/Output Ports initialization
                 ; 0000 004F // Port A initialization
                 ; 0000 0050 // Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0051 // State7=0 State6=0 State5=P State4=P State3=T State2=T State1=T State0=T
                 ; 0000 0052 PORTA=0x30;
000086 e3e0      	LDI  R30,LOW(48)
000087 bbeb      	OUT  0x1B,R30
                 ; 0000 0053 DDRA=0xC0;
000088 ece0      	LDI  R30,LOW(192)
000089 bbea      	OUT  0x1A,R30
                 ; 0000 0054 
                 ; 0000 0055 // Port B initialization
                 ; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 0057 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=T State0=T
                 ; 0000 0058 PORTB=0x00;
00008a e0e0      	LDI  R30,LOW(0)
00008b bbe8      	OUT  0x18,R30
                 ; 0000 0059 DDRB=0x0C;
00008c e0ec      	LDI  R30,LOW(12)
00008d bbe7      	OUT  0x17,R30
                 ; 0000 005A 
                 ; 0000 005B // Port C initialization
                 ; 0000 005C // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
                 ; 0000 005D // State7=T State6=T State5=T State4=T State3=1 State2=T State1=T State0=T
                 ; 0000 005E PORTC=0x08;
00008e e0e8      	LDI  R30,LOW(8)
00008f bbe5      	OUT  0x15,R30
                 ; 0000 005F DDRC=0x08;
000090 bbe4      	OUT  0x14,R30
                 ; 0000 0060 
                 ; 0000 0061 // Port D initialization
                 ; 0000 0062 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 0063 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
                 ; 0000 0064 PORTD=0x00;
000091 e0e0      	LDI  R30,LOW(0)
000092 bbe2      	OUT  0x12,R30
                 ; 0000 0065 DDRD=0xFC;
000093 efec      	LDI  R30,LOW(252)
000094 bbe1      	OUT  0x11,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 0 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: 1250.000 kHz
                 ; 0000 006A // Mode: Fast PWM top=0xFF
                 ; 0000 006B // OC0 output: Non-Inverted PWM
                 ; 0000 006C TCCR0=0x6A;
000095 e6ea      	LDI  R30,LOW(106)
000096 bfe3      	OUT  0x33,R30
                 ; 0000 006D TCNT0=0x00;
000097 e0e0      	LDI  R30,LOW(0)
000098 bfe2      	OUT  0x32,R30
                 ; 0000 006E OCR0=0x00;
000099 bfec      	OUT  0x3C,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer/Counter 1 initialization
                 ; 0000 0071 // Clock source: System Clock
                 ; 0000 0072 // Clock value: 1250.000 kHz
                 ; 0000 0073 // Mode: Fast PWM top=0x00FF
                 ; 0000 0074 // OC1A output: Non-Inv.
                 ; 0000 0075 // OC1B output: Non-Inv.
                 ; 0000 0076 // Noise Canceler: Off
                 ; 0000 0077 // Input Capture on Falling Edge
                 ; 0000 0078 // Timer1 Overflow Interrupt: Off
                 ; 0000 0079 // Input Capture Interrupt: Off
                 ; 0000 007A // Compare A Match Interrupt: Off
                 ; 0000 007B // Compare B Match Interrupt: Off
                 ; 0000 007C TCCR1A=0xA1;
00009a eae1      	LDI  R30,LOW(161)
00009b bdef      	OUT  0x2F,R30
                 ; 0000 007D TCCR1B=0x0A;
00009c e0ea      	LDI  R30,LOW(10)
00009d bdee      	OUT  0x2E,R30
                 ; 0000 007E TCNT1H=0x00;
00009e e0e0      	LDI  R30,LOW(0)
00009f bded      	OUT  0x2D,R30
                 ; 0000 007F TCNT1L=0x00;
0000a0 bdec      	OUT  0x2C,R30
                 ; 0000 0080 ICR1H=0x00;
0000a1 bde7      	OUT  0x27,R30
                 ; 0000 0081 ICR1L=0x00;
0000a2 bde6      	OUT  0x26,R30
                 ; 0000 0082 OCR1AH=0x00;
0000a3 bdeb      	OUT  0x2B,R30
                 ; 0000 0083 OCR1AL=0x00;
0000a4 bdea      	OUT  0x2A,R30
                 ; 0000 0084 OCR1BH=0x00;
0000a5 bde9      	OUT  0x29,R30
                 ; 0000 0085 OCR1BL=0x00;
0000a6 bde8      	OUT  0x28,R30
                 ; 0000 0086 
                 ; 0000 0087 // Timer/Counter 2 initialization
                 ; 0000 0088 // Clock source: System Clock
                 ; 0000 0089 // Clock value: Timer2 Stopped
                 ; 0000 008A // Mode: Normal top=0xFF
                 ; 0000 008B // OC2 output: Disconnected
                 ; 0000 008C ASSR=0x00;
0000a7 bde2      	OUT  0x22,R30
                 ; 0000 008D TCCR2=0x00;
0000a8 bde5      	OUT  0x25,R30
                 ; 0000 008E TCNT2=0x00;
0000a9 bde4      	OUT  0x24,R30
                 ; 0000 008F OCR2=0x00;
0000aa bde3      	OUT  0x23,R30
                 ; 0000 0090 
                 ; 0000 0091 // External Interrupt(s) initialization
                 ; 0000 0092 // INT0: Off
                 ; 0000 0093 // INT1: Off
                 ; 0000 0094 // INT2: Off
                 ; 0000 0095 MCUCR=0x00;
0000ab bfe5      	OUT  0x35,R30
                 ; 0000 0096 MCUCSR=0x00;
0000ac bfe4      	OUT  0x34,R30
                 ; 0000 0097 
                 ; 0000 0098 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0099 TIMSK=0x00;
0000ad bfe9      	OUT  0x39,R30
                 ; 0000 009A 
                 ; 0000 009B // USART initialization
                 ; 0000 009C // USART disabled
                 ; 0000 009D UCSRB=0x00;
0000ae b9ea      	OUT  0xA,R30
                 ; 0000 009E 
                 ; 0000 009F // Analog Comparator initialization
                 ; 0000 00A0 // Analog Comparator: Off
                 ; 0000 00A1 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00A2 ACSR=0x80;
0000af e8e0      	LDI  R30,LOW(128)
0000b0 b9e8      	OUT  0x8,R30
                 ; 0000 00A3 SFIOR=0x00;
0000b1 e0e0      	LDI  R30,LOW(0)
0000b2 bfe0      	OUT  0x30,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // ADC initialization
                 ; 0000 00A6 // ADC disabled
                 ; 0000 00A7 ADCSRA=0x00;
0000b3 b9e6      	OUT  0x6,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // SPI initialization
                 ; 0000 00AA // SPI disabled
                 ; 0000 00AB SPCR=0x00;
0000b4 b9ed      	OUT  0xD,R30
                 ; 0000 00AC 
                 ; 0000 00AD // TWI initialization
                 ; 0000 00AE // TWI disabled
                 ; 0000 00AF TWCR=0x00;
0000b5 bfe6      	OUT  0x36,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // I2C Bus initialization
                 ; 0000 00B2 i2c_init();
0000b6 940e 015a 	CALL _i2c_init
                 ; 0000 00B3 
                 ; 0000 00B4 // Alphanumeric LCD initialization
                 ; 0000 00B5 // Connections specified in the
                 ; 0000 00B6 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B7 // RS - PORTC Bit 0
                 ; 0000 00B8 // RD - PORTC Bit 1
                 ; 0000 00B9 // EN - PORTC Bit 2
                 ; 0000 00BA // D4 - PORTC Bit 4
                 ; 0000 00BB // D5 - PORTC Bit 5
                 ; 0000 00BC // D6 - PORTC Bit 6
                 ; 0000 00BD // D7 - PORTC Bit 7
                 ; 0000 00BE // Characters/line: 16
                 ; 0000 00BF //rc = init_robot();
                 ; 0000 00C0 //if(rc) bug(rc);
                 ; 0000 00C1 lcd_init(16);
0000b8 e1e0      	LDI  R30,LOW(16)
0000b9 93ea      	ST   -Y,R30
0000ba 940e 0112 	CALL _lcd_init
                 ; 0000 00C2 for(i=0;i<18;i++) sensors[i] = 1;
0000bc 2488      	CLR  R8
0000bd 2499      	CLR  R9
                 _0x6:
0000be e1e2      	LDI  R30,LOW(18)
0000bf e0f0      	LDI  R31,HIGH(18)
0000c0 168e      	CP   R8,R30
0000c1 069f      	CPC  R9,R31
0000c2 f47c      	BRGE _0x7
0000c3 01f4      	MOVW R30,R8
0000c4 e8ad      	LDI  R26,LOW(_sensors)
0000c5 e0b1      	LDI  R27,HIGH(_sensors)
0000c6 0fee      	LSL  R30
0000c7 1fff      	ROL  R31
0000c8 0fae      	ADD  R26,R30
0000c9 1fbf      	ADC  R27,R31
0000ca e0e1      	LDI  R30,LOW(1)
0000cb e0f0      	LDI  R31,HIGH(1)
0000cc 93ed      	ST   X+,R30
0000cd 93fc      	ST   X,R31
0000ce 01f4      	MOVW R30,R8
0000cf 9631      	ADIW R30,1
0000d0 014f      	MOVW R8,R30
0000d1 cfec      	RJMP _0x6
                 _0x7:
                 ; 0000 00C3 while (1)
                 _0x8:
                 ; 0000 00C4       {
                 ; 0000 00C5       }
0000d2 cfff      	RJMP _0x8
                 ; 0000 00C6 }
                 _0xB:
0000d3 cfff      	RJMP _0xB
                 ;void write_int(int x, int y, int value) {
                 ; 0000 00C7 void write_int(int x, int y, int value) {
                 ; 0000 00C8     char s[4];
                 ; 0000 00C9     lcd_gotoxy(x,y);
                 ;	x -> Y+8
                 ;	y -> Y+6
                 ;	value -> Y+4
                 ;	s -> Y+0
                 ; 0000 00CA     sprintf(s, "%d", value);
                 ; 0000 00CB     lcd_puts(s);
                 ; 0000 00CC }
                 ;void lcd_writeint(int x, int y, int value) {
                 ; 0000 00CD void lcd_writeint(int x, int y, int value) {
                 ; 0000 00CE     lcd_gotoxy(x,y);
                 ;	x -> Y+4
                 ;	y -> Y+2
                 ;	value -> Y+0
                 ; 0000 00CF     lcd_putchar('0' + value/1000);
                 ; 0000 00D0     lcd_putchar('0' + (value/100)%10);
                 ; 0000 00D1     lcd_putchar('0' + (value/10)%10);
                 ; 0000 00D2     lcd_putchar('0' + value%10);
                 ; 0000 00D3 }
                 ;int init_robot() {
                 ; 0000 00D4 int init_robot() {
                 ; 0000 00D5     init_switches();
                 ; 0000 00D6     if(lcd_enabled) lcd_init(16);
                 ; 0000 00D7     rc = init_sensors();
                 ; 0000 00D8     if(rc) return rc;
                 ; 0000 00D9     return 0;
                 ; 0000 00DA }
                 ;void set_mux(int pin) {
                 ; 0000 00DB void set_mux(int pin) {
                 ; 0000 00DC     MUXD = (pin/8);
                 ;	pin -> Y+0
                 ; 0000 00DD     MUXC = (pin>>3) & 1;
                 ; 0000 00DE     MUXB = (pin>>2) & 1;
                 ; 0000 00DF     MUXA = (pin>>1) & 1;
                 ; 0000 00E0 }
                 ;void init_switches(){
                 ; 0000 00E1 void init_switches(){
                 ; 0000 00E2     set_mux(LCD);
                 ; 0000 00E3     lcd_enabled = MUXOB;
                 ; 0000 00E4     //set_mux(STRICT);
                 ; 0000 00E5     //strict_set = MUXOB;
                 ; 0000 00E6 }
                 ;int init_sensors() {
                 ; 0000 00E7 int init_sensors() {
                 ; 0000 00E8     char sensorHolder;
                 ; 0000 00E9     char swtch;
                 ; 0000 00EA     for(i=0;i<18;i++) {
                 ;	sensorHolder -> R17
                 ;	swtch -> R16
                 ; 0000 00EB         sensorHolder = i;
                 ; 0000 00EC         if(i>15) {swtch = 1; sensorHolder = sensorHolder-16;} else {swtch = 0;}
                 ; 0000 00ED         set_mux(sensorHolder);
                 ; 0000 00EE         if((swtch ? MUXOB : MUXOA) == 0) workingSensors[i] = 1;
                 ; 0000 00EF     }
                 ; 0000 00F0     return 0;
                 ; 0000 00F1 }
                 ;void bug(int error) {
                 ; 0000 00F2 void bug(int error) {
                 ; 0000 00F3     if(lcd_enabled) {
                 ;	error -> Y+0
                 ; 0000 00F4         lcd_puts("BUG on: ");
                 ; 0000 00F5         lcd_putchar('0' + error);
                 ; 0000 00F6     } else {
                 ; 0000 00F7         while(1);}
                 ; 0000 00F8 }
                 
                 	.DSEG
                 _0x20:
000160           	.BYTE 0x9
                 ;void checksensors() {
                 ; 0000 00F9 void checksensors() {
                 
                 	.CSEG
                 ; 0000 00FA     char sensorHolder;
                 ; 0000 00FB     char swtch;
                 ; 0000 00FC     for(i=0;i<18;i++) {
                 ;	sensorHolder -> R17
                 ;	swtch -> R16
                 ; 0000 00FD         if(workingSensors[i] == 0) sensors[i] = 1; else {
                 ; 0000 00FE             sensorHolder = i;
                 ; 0000 00FF             if(i>15) {swtch = 1; sensorHolder = sensorHolder-16;} else {swtch = 0;}
                 ; 0000 0100             set_mux(sensorHolder);
                 ; 0000 0101             sensors[i] = (swtch ? MUXOB : MUXOA);
                 ; 0000 0102         }
                 ; 0000 0103     }
                 ; 0000 0104 
                 ; 0000 0105 }
                 ;float getMovement() {
                 ; 0000 0106 float getMovement() {
                 ; 0000 0107     unsigned char left = 0, right = 0, sum = 0, n = 0;
                 ; 0000 0108     float ret = 0;
                 ; 0000 0109     for(i=0;i<18;i++) {
                 ;	left -> R17
                 ;	right -> R16
                 ;	sum -> R19
                 ;	n -> R18
                 ;	ret -> Y+4
                 ; 0000 010A         if(sensors[i] == 0) {
                 ; 0000 010B             sum+= i;
                 ; 0000 010C             n++;
                 ; 0000 010D             if(i<5) left++;
                 ; 0000 010E             if(i>13) right++;
                 ; 0000 010F         }
                 ; 0000 0110     }
                 ; 0000 0111     if(left>0 && right >0) sum += (left * 18);
                 ; 0000 0112     ret = (float) sum/n;
                 ; 0000 0113     if(ret>18) ret -= 18;
                 ; 0000 0114     return ret;
                 ; 0000 0115 }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
0000d4 81e8      	LD   R30,Y
0000d5 71e0      	ANDI R30,LOW(0x10)
0000d6 f011      	BREQ _0x2040004
0000d7 9aac      	SBI  0x15,4
0000d8 c001      	RJMP _0x2040005
                 _0x2040004:
0000d9 98ac      	CBI  0x15,4
                 _0x2040005:
0000da 81e8      	LD   R30,Y
0000db 72e0      	ANDI R30,LOW(0x20)
0000dc f011      	BREQ _0x2040006
0000dd 9aad      	SBI  0x15,5
0000de c001      	RJMP _0x2040007
                 _0x2040006:
0000df 98ad      	CBI  0x15,5
                 _0x2040007:
0000e0 81e8      	LD   R30,Y
0000e1 74e0      	ANDI R30,LOW(0x40)
0000e2 f011      	BREQ _0x2040008
0000e3 9aae      	SBI  0x15,6
0000e4 c001      	RJMP _0x2040009
                 _0x2040008:
0000e5 98ae      	CBI  0x15,6
                 _0x2040009:
0000e6 81e8      	LD   R30,Y
0000e7 78e0      	ANDI R30,LOW(0x80)
0000e8 f011      	BREQ _0x204000A
0000e9 9aaf      	SBI  0x15,7
0000ea c001      	RJMP _0x204000B
                 _0x204000A:
0000eb 98af      	CBI  0x15,7
                 _0x204000B:
                +
0000ec e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0000ed 958a     +DEC R24
0000ee f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0000ef 9aaa      	SBI  0x15,2
                +
0000f0 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0000f1 958a     +DEC R24
0000f2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0000f3 98aa      	CBI  0x15,2
                +
0000f4 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0000f5 958a     +DEC R24
0000f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0000f7 c04e      	RJMP _0x20C0001
                 __lcd_write_data:
0000f8 81e8      	LD   R30,Y
0000f9 93ea      	ST   -Y,R30
0000fa dfd9      	RCALL __lcd_write_nibble_G102
0000fb 81e8          ld    r30,y
0000fc 95e2          swap  r30
0000fd 83e8          st    y,r30
0000fe 81e8      	LD   R30,Y
0000ff 93ea      	ST   -Y,R30
000100 dfd3      	RCALL __lcd_write_nibble_G102
                +
000101 ea87     +LDI R24 , LOW ( 167 )
                +__DELAY_USB_LOOP :
000102 958a     +DEC R24
000103 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 167
000104 c041      	RJMP _0x20C0001
                 _lcd_clear:
000105 e0e2      	LDI  R30,LOW(2)
000106 940e 0148 	CALL SUBOPT_0x0
000108 e0ec      	LDI  R30,LOW(12)
000109 93ea      	ST   -Y,R30
00010a dfed      	RCALL __lcd_write_data
00010b e0e1      	LDI  R30,LOW(1)
00010c 940e 0148 	CALL SUBOPT_0x0
00010e e0e0      	LDI  R30,LOW(0)
00010f 2ece      	MOV  R12,R30
000110 2ede      	MOV  R13,R30
000111 9508      	RET
                 _lcd_init:
000112 9aa4      	SBI  0x14,4
000113 9aa5      	SBI  0x14,5
000114 9aa6      	SBI  0x14,6
000115 9aa7      	SBI  0x14,7
000116 9aa2      	SBI  0x14,2
000117 9aa0      	SBI  0x14,0
000118 9aa1      	SBI  0x14,1
000119 98aa      	CBI  0x15,2
00011a 98a8      	CBI  0x15,0
00011b 98a9      	CBI  0x15,1
00011c 81e8      	LD   R30,Y
00011d 93e0 01b9 	STS  __lcd_maxx,R30
00011f 58e0      	SUBI R30,-LOW(128)
                +
000120 93e0 01b7+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000122 81e8      	LD   R30,Y
000123 54e0      	SUBI R30,-LOW(192)
                +
000124 93e0 01b8+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000126 e1e4      	LDI  R30,LOW(20)
000127 e0f0      	LDI  R31,HIGH(20)
000128 93fa      	ST   -Y,R31
000129 93ea      	ST   -Y,R30
00012a 940e 01ac 	CALL _delay_ms
00012c 940e 0151 	CALL SUBOPT_0x1
00012e 940e 0151 	CALL SUBOPT_0x1
000130 940e 0151 	CALL SUBOPT_0x1
000132 e2e0      	LDI  R30,LOW(32)
000133 93ea      	ST   -Y,R30
000134 df9f      	RCALL __lcd_write_nibble_G102
                +
000135 ef8a     +LDI R24 , LOW ( 250 )
000136 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
000137 9701     +SBIW R24 , 1
000138 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
000139 e2e8      	LDI  R30,LOW(40)
00013a 93ea      	ST   -Y,R30
00013b dfbc      	RCALL __lcd_write_data
00013c e0e4      	LDI  R30,LOW(4)
00013d 93ea      	ST   -Y,R30
00013e dfb9      	RCALL __lcd_write_data
00013f e8e5      	LDI  R30,LOW(133)
000140 93ea      	ST   -Y,R30
000141 dfb6      	RCALL __lcd_write_data
000142 e0e6      	LDI  R30,LOW(6)
000143 93ea      	ST   -Y,R30
000144 dfb3      	RCALL __lcd_write_data
000145 dfbf      	RCALL _lcd_clear
                 _0x20C0001:
000146 9621      	ADIW R28,1
000147 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _workingSensors:
000169           	.BYTE 0x24
                 _sensors:
00018d           	.BYTE 0x24
                 __seed_G101:
0001b1           	.BYTE 0x4
                 __base_y_G102:
0001b5           	.BYTE 0x4
                 __lcd_maxx:
0001b9           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000148 93ea      	ST   -Y,R30
000149 940e 00f8 	CALL __lcd_write_data
00014b e0e3      	LDI  R30,LOW(3)
00014c e0f0      	LDI  R31,HIGH(3)
00014d 93fa      	ST   -Y,R31
00014e 93ea      	ST   -Y,R30
00014f 940c 01ac 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000151 e3e0      	LDI  R30,LOW(48)
000152 93ea      	ST   -Y,R30
000153 940e 00d4 	CALL __lcd_write_nibble_G102
                +
000155 ef8a     +LDI R24 , LOW ( 250 )
000156 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
000157 9701     +SBIW R24 , 1
000158 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
000159 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
00015a 98c1      	cbi  __i2c_port,__scl_bit
00015b 98c0      	cbi  __i2c_port,__sda_bit
00015c 9ab9      	sbi  __i2c_dir,__scl_bit
00015d 98b8      	cbi  __i2c_dir,__sda_bit
00015e c015      	rjmp __i2c_delay2
                 _i2c_start:
00015f 98b8      	cbi  __i2c_dir,__sda_bit
000160 98b9      	cbi  __i2c_dir,__scl_bit
000161 27ee      	clr  r30
000162 0000      	nop
000163 9bb0      	sbis __i2c_pin,__sda_bit
000164 9508      	ret
000165 9bb1      	sbis __i2c_pin,__scl_bit
000166 9508      	ret
000167 d004      	rcall __i2c_delay1
000168 9ab8      	sbi  __i2c_dir,__sda_bit
000169 d002      	rcall __i2c_delay1
00016a 9ab9      	sbi  __i2c_dir,__scl_bit
00016b e0e1      	ldi  r30,1
                 __i2c_delay1:
00016c e161      	ldi  r22,17
00016d c007      	rjmp __i2c_delay2l
                 _i2c_stop:
00016e 9ab8      	sbi  __i2c_dir,__sda_bit
00016f 9ab9      	sbi  __i2c_dir,__scl_bit
000170 d003      	rcall __i2c_delay2
000171 98b9      	cbi  __i2c_dir,__scl_bit
000172 dff9      	rcall __i2c_delay1
000173 98b8      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000174 e261      	ldi  r22,33
                 __i2c_delay2l:
000175 956a      	dec  r22
000176 f7f1      	brne __i2c_delay2l
000177 9508      	ret
                 _i2c_read:
000178 e078      	ldi  r23,8
                 __i2c_read0:
000179 98b9      	cbi  __i2c_dir,__scl_bit
00017a dff1      	rcall __i2c_delay1
                 __i2c_read3:
00017b 9bb1      	sbis __i2c_pin,__scl_bit
00017c cffe      	rjmp __i2c_read3
00017d dfee      	rcall __i2c_delay1
00017e 9488      	clc
00017f 99b0      	sbic __i2c_pin,__sda_bit
000180 9408      	sec
000181 9ab9      	sbi  __i2c_dir,__scl_bit
000182 dff1      	rcall __i2c_delay2
000183 1fee      	rol  r30
000184 957a      	dec  r23
000185 f799      	brne __i2c_read0
000186 9179      	ld   r23,y+
000187 2377      	tst  r23
000188 f411      	brne __i2c_read1
000189 98b8      	cbi  __i2c_dir,__sda_bit
00018a c001      	rjmp __i2c_read2
                 __i2c_read1:
00018b 9ab8      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
00018c dfdf      	rcall __i2c_delay1
00018d 98b9      	cbi  __i2c_dir,__scl_bit
00018e dfe5      	rcall __i2c_delay2
00018f 9ab9      	sbi  __i2c_dir,__scl_bit
000190 dfdb      	rcall __i2c_delay1
000191 98b8      	cbi  __i2c_dir,__sda_bit
000192 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000193 91e9      	ld   r30,y+
000194 e078      	ldi  r23,8
                 __i2c_write0:
000195 0fee      	lsl  r30
000196 f410      	brcc __i2c_write1
000197 98b8      	cbi  __i2c_dir,__sda_bit
000198 c001      	rjmp __i2c_write2
                 __i2c_write1:
000199 9ab8      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
00019a dfd9      	rcall __i2c_delay2
00019b 98b9      	cbi  __i2c_dir,__scl_bit
00019c dfcf      	rcall __i2c_delay1
                 __i2c_write3:
00019d 9bb1      	sbis __i2c_pin,__scl_bit
00019e cffe      	rjmp __i2c_write3
00019f dfcc      	rcall __i2c_delay1
0001a0 9ab9      	sbi  __i2c_dir,__scl_bit
0001a1 957a      	dec  r23
0001a2 f791      	brne __i2c_write0
0001a3 98b8      	cbi  __i2c_dir,__sda_bit
0001a4 dfc7      	rcall __i2c_delay1
0001a5 98b9      	cbi  __i2c_dir,__scl_bit
0001a6 dfcd      	rcall __i2c_delay2
0001a7 e0e1      	ldi  r30,1
0001a8 99b0      	sbic __i2c_pin,__sda_bit
0001a9 27ee      	clr  r30
0001aa 9ab9      	sbi  __i2c_dir,__scl_bit
0001ab cfc0      	rjmp __i2c_delay1
                 
                 _delay_ms:
0001ac 91e9      	ld   r30,y+
0001ad 91f9      	ld   r31,y+
0001ae 9630      	adiw r30,0
0001af f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001b0 ec84     +LDI R24 , LOW ( 0x9C4 )
0001b1 e099     +LDI R25 , HIGH ( 0x9C4 )
                +__DELAY_USW_LOOP :
0001b2 9701     +SBIW R24 , 1
0001b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x9C4
0001b4 95a8      	wdr
0001b5 9731      	sbiw r30,1
0001b6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b7 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   5 r9 :   2 r10:   0 r11:   0 r12:   1 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   6 
r24:  21 r25:   5 r26:   5 r27:   4 r28:   2 r29:   1 r30: 131 r31:  16 
x  :   5 y  :  29 z  :   7 
Registers used: 19 out of 35 (54.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  10 
cbi   :  23 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   1 cpi   :   0 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  23 ld    :  13 ldd   :   0 ldi   :  64 
lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   2 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   0 
ori   :   0 out   :  42 pop   :   0 push  :   0 rcall :  24 ret   :   7 
reti  :   0 rjmp  :  18 rol   :   2 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :  23 sbic  :   2 sbis  :   4 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   0 sts   :   3 sub   :   0 subi  :   2 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 40 out of 116 (34.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000370    792     88    880   16384   5.4%
[.dseg] 0x000060 0x0001ba      0     90     90    1119   8.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
