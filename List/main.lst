
AVRASM ver. 2.1.30  D:\Robotics\SoccerJun2\src\List\main.asm Mon Mar 18 00:50:12 2013

D:\Robotics\SoccerJun2\src\List\main.asm(1059): warning: Register r4 already defined by the .DEF directive
D:\Robotics\SoccerJun2\src\List\main.asm(1060): warning: Register r7 already defined by the .DEF directive
D:\Robotics\SoccerJun2\src\List\main.asm(1061): warning: Register r6 already defined by the .DEF directive
D:\Robotics\SoccerJun2\src\List\main.asm(1062): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 10.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rc=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 3425
000034 0064      	.DB  0x25,0x34,0x64,0x0
                 _0x2020003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0002      	.DW  0x02
000037 0160      	.DW  __base_y_G101
000038 006a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 __RESET:
00003a 94f8      	CLI
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000041 e1f8      	LDI  R31,0x18
000042 bdf1      	OUT  WDTCR,R31
000043 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000044 e08d      	LDI  R24,(14-2)+1
000045 e0a2      	LDI  R26,2
000046 27bb      	CLR  R27
                 __CLEAR_REG:
000047 93ed      	ST   X+,R30
000048 958a      	DEC  R24
000049 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000050 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000051 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000052 9185      	LPM  R24,Z+
000053 9195      	LPM  R25,Z+
000054 9700      	SBIW R24,0
000055 f061      	BREQ __GLOBAL_INI_END
000056 91a5      	LPM  R26,Z+
000057 91b5      	LPM  R27,Z+
000058 9005      	LPM  R0,Z+
000059 9015      	LPM  R1,Z+
00005a 01bf      	MOVW R22,R30
00005b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005c 9005      	LPM  R0,Z+
00005d 920d      	ST   X+,R0
00005e 9701      	SBIW R24,1
00005f f7e1      	BRNE __GLOBAL_INI_LOOP
000060 01fb      	MOVW R30,R22
000061 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000062 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000063 bfed      	OUT  SPL,R30
000064 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000065 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000066 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000067 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000068 940c 006a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project : AMOS Robocup Junior Soccer 2013
                 ;Version : 3
                 ;Date    : 3/17/2013
                 ;Author  : Miro Markarian and AMOS team
                 ;Company : AMOS
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 10.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x18 ;PORTB
                    .equ __sda_bit=0
                    .equ __scl_bit=1
                 ; 0000 0019 #endasm
                 ;#include <i2c.h>
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;/* Define BUG */
                 ;#define BUG while(1)
                 ;
                 ;/* MUX ADDRESS */
                 ;#define MUXA PORTA.6
                 ;#define MUXB PORTA.7
                 ;#define MUXC PORTD.6
                 ;#define MUXD PORTD.7
                 ;
                 ;/* MUX OUT */
                 ;#define MUXOA PINA.4
                 ;#define MUXOB PINA.5
                 ;
                 ;
                 ;/* MUX PINS*/
                 ;#define LCD 15
                 ;
                 ;/* Define function prototypes so we can use this functions globally */
                 ;int init_robot();
                 ;void write_int(int x, int y, int value);
                 ;void set_mux(int pin);
                 ;int lcd_enabled();
                 ;
                 ;/* Define global variables */
                 ;int rc;
                 ;void main(void)
                 ; 0000 003B {
                 
                 	.CSEG
                 _main:
                 ; 0000 003C // Declare your local variables here
                 ; 0000 003D 
                 ; 0000 003E // Input/Output Ports initialization
                 ; 0000 003F // Port A initialization
                 ; 0000 0040 // Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0041 // State7=0 State6=0 State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0042 PORTA=0x00;
00006a e0e0      	LDI  R30,LOW(0)
00006b bbeb      	OUT  0x1B,R30
                 ; 0000 0043 DDRA=0xC0;
00006c ece0      	LDI  R30,LOW(192)
00006d bbea      	OUT  0x1A,R30
                 ; 0000 0044 
                 ; 0000 0045 // Port B initialization
                 ; 0000 0046 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 0047 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=T State0=T
                 ; 0000 0048 PORTB=0x00;
00006e e0e0      	LDI  R30,LOW(0)
00006f bbe8      	OUT  0x18,R30
                 ; 0000 0049 DDRB=0x0C;
000070 e0ec      	LDI  R30,LOW(12)
000071 bbe7      	OUT  0x17,R30
                 ; 0000 004A 
                 ; 0000 004B // Port C initialization
                 ; 0000 004C // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
                 ; 0000 004D // State7=T State6=T State5=T State4=T State3=1 State2=T State1=T State0=T
                 ; 0000 004E PORTC=0x08;
000072 e0e8      	LDI  R30,LOW(8)
000073 bbe5      	OUT  0x15,R30
                 ; 0000 004F DDRC=0x08;
000074 bbe4      	OUT  0x14,R30
                 ; 0000 0050 
                 ; 0000 0051 // Port D initialization
                 ; 0000 0052 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 0053 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
                 ; 0000 0054 PORTD=0x00;
000075 e0e0      	LDI  R30,LOW(0)
000076 bbe2      	OUT  0x12,R30
                 ; 0000 0055 DDRD=0xFC;
000077 efec      	LDI  R30,LOW(252)
000078 bbe1      	OUT  0x11,R30
                 ; 0000 0056 
                 ; 0000 0057 // Timer/Counter 0 initialization
                 ; 0000 0058 // Clock source: System Clock
                 ; 0000 0059 // Clock value: 1250.000 kHz
                 ; 0000 005A // Mode: Fast PWM top=0xFF
                 ; 0000 005B // OC0 output: Non-Inverted PWM
                 ; 0000 005C TCCR0=0x6A;
000079 e6ea      	LDI  R30,LOW(106)
00007a bfe3      	OUT  0x33,R30
                 ; 0000 005D TCNT0=0x00;
00007b e0e0      	LDI  R30,LOW(0)
00007c bfe2      	OUT  0x32,R30
                 ; 0000 005E OCR0=0x00;
00007d bfec      	OUT  0x3C,R30
                 ; 0000 005F 
                 ; 0000 0060 // Timer/Counter 1 initialization
                 ; 0000 0061 // Clock source: System Clock
                 ; 0000 0062 // Clock value: 1250.000 kHz
                 ; 0000 0063 // Mode: Fast PWM top=0x00FF
                 ; 0000 0064 // OC1A output: Non-Inv.
                 ; 0000 0065 // OC1B output: Non-Inv.
                 ; 0000 0066 // Noise Canceler: Off
                 ; 0000 0067 // Input Capture on Falling Edge
                 ; 0000 0068 // Timer1 Overflow Interrupt: Off
                 ; 0000 0069 // Input Capture Interrupt: Off
                 ; 0000 006A // Compare A Match Interrupt: Off
                 ; 0000 006B // Compare B Match Interrupt: Off
                 ; 0000 006C TCCR1A=0xA1;
00007e eae1      	LDI  R30,LOW(161)
00007f bdef      	OUT  0x2F,R30
                 ; 0000 006D TCCR1B=0x0A;
000080 e0ea      	LDI  R30,LOW(10)
000081 bdee      	OUT  0x2E,R30
                 ; 0000 006E TCNT1H=0x00;
000082 e0e0      	LDI  R30,LOW(0)
000083 bded      	OUT  0x2D,R30
                 ; 0000 006F TCNT1L=0x00;
000084 bdec      	OUT  0x2C,R30
                 ; 0000 0070 ICR1H=0x00;
000085 bde7      	OUT  0x27,R30
                 ; 0000 0071 ICR1L=0x00;
000086 bde6      	OUT  0x26,R30
                 ; 0000 0072 OCR1AH=0x00;
000087 bdeb      	OUT  0x2B,R30
                 ; 0000 0073 OCR1AL=0x00;
000088 bdea      	OUT  0x2A,R30
                 ; 0000 0074 OCR1BH=0x00;
000089 bde9      	OUT  0x29,R30
                 ; 0000 0075 OCR1BL=0x00;
00008a bde8      	OUT  0x28,R30
                 ; 0000 0076 
                 ; 0000 0077 // Timer/Counter 2 initialization
                 ; 0000 0078 // Clock source: System Clock
                 ; 0000 0079 // Clock value: Timer2 Stopped
                 ; 0000 007A // Mode: Normal top=0xFF
                 ; 0000 007B // OC2 output: Disconnected
                 ; 0000 007C ASSR=0x00;
00008b bde2      	OUT  0x22,R30
                 ; 0000 007D TCCR2=0x00;
00008c bde5      	OUT  0x25,R30
                 ; 0000 007E TCNT2=0x00;
00008d bde4      	OUT  0x24,R30
                 ; 0000 007F OCR2=0x00;
00008e bde3      	OUT  0x23,R30
                 ; 0000 0080 
                 ; 0000 0081 // External Interrupt(s) initialization
                 ; 0000 0082 // INT0: Off
                 ; 0000 0083 // INT1: Off
                 ; 0000 0084 // INT2: Off
                 ; 0000 0085 MCUCR=0x00;
00008f bfe5      	OUT  0x35,R30
                 ; 0000 0086 MCUCSR=0x00;
000090 bfe4      	OUT  0x34,R30
                 ; 0000 0087 
                 ; 0000 0088 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0089 TIMSK=0x00;
000091 bfe9      	OUT  0x39,R30
                 ; 0000 008A 
                 ; 0000 008B // USART initialization
                 ; 0000 008C // USART disabled
                 ; 0000 008D UCSRB=0x00;
000092 b9ea      	OUT  0xA,R30
                 ; 0000 008E 
                 ; 0000 008F // Analog Comparator initialization
                 ; 0000 0090 // Analog Comparator: Off
                 ; 0000 0091 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0092 ACSR=0x80;
000093 e8e0      	LDI  R30,LOW(128)
000094 b9e8      	OUT  0x8,R30
                 ; 0000 0093 SFIOR=0x00;
000095 e0e0      	LDI  R30,LOW(0)
000096 bfe0      	OUT  0x30,R30
                 ; 0000 0094 
                 ; 0000 0095 // ADC initialization
                 ; 0000 0096 // ADC disabled
                 ; 0000 0097 ADCSRA=0x00;
000097 b9e6      	OUT  0x6,R30
                 ; 0000 0098 
                 ; 0000 0099 // SPI initialization
                 ; 0000 009A // SPI disabled
                 ; 0000 009B SPCR=0x00;
000098 b9ed      	OUT  0xD,R30
                 ; 0000 009C 
                 ; 0000 009D // TWI initialization
                 ; 0000 009E // TWI disabled
                 ; 0000 009F TWCR=0x00;
000099 bfe6      	OUT  0x36,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // I2C Bus initialization
                 ; 0000 00A2 i2c_init();
00009a 940e 017e 	CALL _i2c_init
                 ; 0000 00A3 
                 ; 0000 00A4 // Alphanumeric LCD initialization
                 ; 0000 00A5 // Connections specified in the
                 ; 0000 00A6 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A7 // RS - PORTC Bit 0
                 ; 0000 00A8 // RD - PORTC Bit 1
                 ; 0000 00A9 // EN - PORTC Bit 2
                 ; 0000 00AA // D4 - PORTC Bit 4
                 ; 0000 00AB // D5 - PORTC Bit 5
                 ; 0000 00AC // D6 - PORTC Bit 6
                 ; 0000 00AD // D7 - PORTC Bit 7
                 ; 0000 00AE // Characters/line: 16
                 ; 0000 00AF rc = init_robot();
00009c d007      	RCALL _init_robot
00009d 012f      	MOVW R4,R30
                 ; 0000 00B0 if(rc) BUG;
00009e 2c04      	MOV  R0,R4
00009f 2805      	OR   R0,R5
0000a0 f009      	BREQ _0x3
                 _0x4:
0000a1 cfff      	RJMP _0x4
                 ; 0000 00B1 while (1)
                 _0x3:
                 _0x7:
                 ; 0000 00B2       {
                 ; 0000 00B3       //checksensors();
                 ; 0000 00B4       }
0000a2 cfff      	RJMP _0x7
                 ; 0000 00B5 }
                 _0xA:
0000a3 cfff      	RJMP _0xA
                 ;void write_int(int x, int y, int value) {
                 ; 0000 00B6 void write_int(int x, int y, int value) {
                 ; 0000 00B7 char s[4];
                 ; 0000 00B8 lcd_gotoxy(x,y);
                 ;	x -> Y+8
                 ;	y -> Y+6
                 ;	value -> Y+4
                 ;	s -> Y+0
                 ; 0000 00B9 sprintf(s, "%4d", value);
                 ; 0000 00BA lcd_puts(s);
                 ; 0000 00BB }
                 ;int init_robot() {
                 ; 0000 00BC int init_robot() {
                 _init_robot:
                 ; 0000 00BD     if(lcd_enabled()) lcd_init(16);
0000a4 d03d      	RCALL _lcd_enabled
0000a5 9730      	SBIW R30,0
0000a6 f021      	BREQ _0xB
0000a7 e1e0      	LDI  R30,LOW(16)
0000a8 93ea      	ST   -Y,R30
0000a9 940e 012a 	CALL _lcd_init
                 ; 0000 00BE     return 0;
                 _0xB:
0000ab e0e0      	LDI  R30,LOW(0)
0000ac e0f0      	LDI  R31,HIGH(0)
0000ad 9508      	RET
                 ; 0000 00BF }
                 ;void set_mux(int pin) {
                 ; 0000 00C0 void set_mux(int pin) {
                 _set_mux:
                 ; 0000 00C1     MUXD = (pin/8);
                 ;	pin -> Y+0
0000ae 940e 015f 	CALL SUBOPT_0x0
0000b0 30e0      	CPI  R30,0
0000b1 f411      	BRNE _0xC
0000b2 9897      	CBI  0x12,7
0000b3 c001      	RJMP _0xD
                 _0xC:
0000b4 9a97      	SBI  0x12,7
                 _0xD:
                 ; 0000 00C2     MUXC = (pin/8) ^ pin%2;
0000b5 940e 015f 	CALL SUBOPT_0x0
0000b7 2f6e      	MOV  R22,R30
0000b8 81a8      	LD   R26,Y
0000b9 81b9      	LDD  R27,Y+1
0000ba 940e 0166 	CALL SUBOPT_0x1
0000bc f411      	BRNE _0xE
0000bd 9896      	CBI  0x12,6
0000be c001      	RJMP _0xF
                 _0xE:
0000bf 9a96      	SBI  0x12,6
                 _0xF:
                 ; 0000 00C3     MUXB = (pin/8) ^ (pin/2)%2;
0000c0 940e 015f 	CALL SUBOPT_0x0
0000c2 2f6e      	MOV  R22,R30
0000c3 81a8      	LD   R26,Y
0000c4 81b9      	LDD  R27,Y+1
0000c5 e0e2      	LDI  R30,LOW(2)
0000c6 e0f0      	LDI  R31,HIGH(2)
0000c7 940e 01f3 	CALL __DIVW21
0000c9 01df      	MOVW R26,R30
0000ca 940e 0166 	CALL SUBOPT_0x1
0000cc f411      	BRNE _0x10
0000cd 98df      	CBI  0x1B,7
0000ce c001      	RJMP _0x11
                 _0x10:
0000cf 9adf      	SBI  0x1B,7
                 _0x11:
                 ; 0000 00C4     MUXA = (pin/8) ^ (pin/4)%2;
0000d0 940e 015f 	CALL SUBOPT_0x0
0000d2 2f6e      	MOV  R22,R30
0000d3 81a8      	LD   R26,Y
0000d4 81b9      	LDD  R27,Y+1
0000d5 e0e4      	LDI  R30,LOW(4)
0000d6 e0f0      	LDI  R31,HIGH(4)
0000d7 940e 01f3 	CALL __DIVW21
0000d9 01df      	MOVW R26,R30
0000da 940e 0166 	CALL SUBOPT_0x1
0000dc f411      	BRNE _0x12
0000dd 98de      	CBI  0x1B,6
0000de c001      	RJMP _0x13
                 _0x12:
0000df 9ade      	SBI  0x1B,6
                 _0x13:
                 ; 0000 00C5 }
0000e0 9622      	ADIW R28,2
0000e1 9508      	RET
                 ;int lcd_enabled() {
                 ; 0000 00C6 int lcd_enabled() {
                 _lcd_enabled:
                 ; 0000 00C7     set_mux(LCD);
0000e2 e0ef      	LDI  R30,LOW(15)
0000e3 e0f0      	LDI  R31,HIGH(15)
0000e4 93fa      	ST   -Y,R31
0000e5 93ea      	ST   -Y,R30
0000e6 dfc7      	RCALL _set_mux
                 ; 0000 00C8     return MUXOB;
0000e7 e0e0      	LDI  R30,0
0000e8 99cd      	SBIC 0x19,5
0000e9 e0e1      	LDI  R30,1
0000ea e0f0      	LDI  R31,0
0000eb 9508      	RET
                 ; 0000 00C9 }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
0000ec 81e8      	LD   R30,Y
0000ed 71e0      	ANDI R30,LOW(0x10)
0000ee f011      	BREQ _0x2020004
0000ef 9aac      	SBI  0x15,4
0000f0 c001      	RJMP _0x2020005
                 _0x2020004:
0000f1 98ac      	CBI  0x15,4
                 _0x2020005:
0000f2 81e8      	LD   R30,Y
0000f3 72e0      	ANDI R30,LOW(0x20)
0000f4 f011      	BREQ _0x2020006
0000f5 9aad      	SBI  0x15,5
0000f6 c001      	RJMP _0x2020007
                 _0x2020006:
0000f7 98ad      	CBI  0x15,5
                 _0x2020007:
0000f8 81e8      	LD   R30,Y
0000f9 74e0      	ANDI R30,LOW(0x40)
0000fa f011      	BREQ _0x2020008
0000fb 9aae      	SBI  0x15,6
0000fc c001      	RJMP _0x2020009
                 _0x2020008:
0000fd 98ae      	CBI  0x15,6
                 _0x2020009:
0000fe 81e8      	LD   R30,Y
0000ff 78e0      	ANDI R30,LOW(0x80)
000100 f011      	BREQ _0x202000A
000101 9aaf      	SBI  0x15,7
000102 c001      	RJMP _0x202000B
                 _0x202000A:
000103 98af      	CBI  0x15,7
                 _0x202000B:
                +
000104 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
000105 958a     +DEC R24
000106 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
000107 9aaa      	SBI  0x15,2
                +
000108 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000109 958a     +DEC R24
00010a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00010b 98aa      	CBI  0x15,2
                +
00010c e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00010f c04d      	RJMP _0x2080001
                 __lcd_write_data:
000110 81e8      	LD   R30,Y
000111 93ea      	ST   -Y,R30
000112 dfd9      	RCALL __lcd_write_nibble_G101
000113 81e8          ld    r30,y
000114 95e2          swap  r30
000115 83e8          st    y,r30
000116 81e8      	LD   R30,Y
000117 93ea      	ST   -Y,R30
000118 dfd3      	RCALL __lcd_write_nibble_G101
                +
000119 ea87     +LDI R24 , LOW ( 167 )
                +__DELAY_USB_LOOP :
00011a 958a     +DEC R24
00011b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 167
00011c c040      	RJMP _0x2080001
                 _lcd_clear:
00011d e0e2      	LDI  R30,LOW(2)
00011e 940e 016c 	CALL SUBOPT_0x2
000120 e0ec      	LDI  R30,LOW(12)
000121 93ea      	ST   -Y,R30
000122 dfed      	RCALL __lcd_write_data
000123 e0e1      	LDI  R30,LOW(1)
000124 940e 016c 	CALL SUBOPT_0x2
000126 e0e0      	LDI  R30,LOW(0)
000127 2e6e      	MOV  R6,R30
000128 2e7e      	MOV  R7,R30
000129 9508      	RET
                 _lcd_init:
00012a 9aa4      	SBI  0x14,4
00012b 9aa5      	SBI  0x14,5
00012c 9aa6      	SBI  0x14,6
00012d 9aa7      	SBI  0x14,7
00012e 9aa2      	SBI  0x14,2
00012f 9aa0      	SBI  0x14,0
000130 9aa1      	SBI  0x14,1
000131 98aa      	CBI  0x15,2
000132 98a8      	CBI  0x15,0
000133 98a9      	CBI  0x15,1
000134 8098      	LDD  R9,Y+0
000135 81e8      	LD   R30,Y
000136 58e0      	SUBI R30,-LOW(128)
                +
000137 93e0 0162+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000139 81e8      	LD   R30,Y
00013a 54e0      	SUBI R30,-LOW(192)
                +
00013b 93e0 0163+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00013d e1e4      	LDI  R30,LOW(20)
00013e e0f0      	LDI  R31,HIGH(20)
00013f 93fa      	ST   -Y,R31
000140 93ea      	ST   -Y,R30
000141 940e 01d0 	CALL _delay_ms
000143 940e 0175 	CALL SUBOPT_0x3
000145 940e 0175 	CALL SUBOPT_0x3
000147 940e 0175 	CALL SUBOPT_0x3
000149 e2e0      	LDI  R30,LOW(32)
00014a 93ea      	ST   -Y,R30
00014b dfa0      	RCALL __lcd_write_nibble_G101
                +
00014c ef8a     +LDI R24 , LOW ( 250 )
00014d e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00014e 9701     +SBIW R24 , 1
00014f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
000150 e2e8      	LDI  R30,LOW(40)
000151 93ea      	ST   -Y,R30
000152 dfbd      	RCALL __lcd_write_data
000153 e0e4      	LDI  R30,LOW(4)
000154 93ea      	ST   -Y,R30
000155 dfba      	RCALL __lcd_write_data
000156 e8e5      	LDI  R30,LOW(133)
000157 93ea      	ST   -Y,R30
000158 dfb7      	RCALL __lcd_write_data
000159 e0e6      	LDI  R30,LOW(6)
00015a 93ea      	ST   -Y,R30
00015b dfb4      	RCALL __lcd_write_data
00015c dfc0      	RCALL _lcd_clear
                 _0x2080001:
00015d 9621      	ADIW R28,1
00015e 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
00015f 81a8      	LD   R26,Y
000160 81b9      	LDD  R27,Y+1
000161 e0e8      	LDI  R30,LOW(8)
000162 e0f0      	LDI  R31,HIGH(8)
000163 940e 01f3 	CALL __DIVW21
000165 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000166 e0e2      	LDI  R30,LOW(2)
000167 e0f0      	LDI  R31,HIGH(2)
000168 940e 01f8 	CALL __MODW21
00016a 27e6      	EOR  R30,R22
00016b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
00016c 93ea      	ST   -Y,R30
00016d 940e 0110 	CALL __lcd_write_data
00016f e0e3      	LDI  R30,LOW(3)
000170 e0f0      	LDI  R31,HIGH(3)
000171 93fa      	ST   -Y,R31
000172 93ea      	ST   -Y,R30
000173 940c 01d0 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000175 e3e0      	LDI  R30,LOW(48)
000176 93ea      	ST   -Y,R30
000177 940e 00ec 	CALL __lcd_write_nibble_G101
                +
000179 ef8a     +LDI R24 , LOW ( 250 )
00017a e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00017b 9701     +SBIW R24 , 1
00017c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
00017d 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
00017e 98c1      	cbi  __i2c_port,__scl_bit
00017f 98c0      	cbi  __i2c_port,__sda_bit
000180 9ab9      	sbi  __i2c_dir,__scl_bit
000181 98b8      	cbi  __i2c_dir,__sda_bit
000182 c015      	rjmp __i2c_delay2
                 _i2c_start:
000183 98b8      	cbi  __i2c_dir,__sda_bit
000184 98b9      	cbi  __i2c_dir,__scl_bit
000185 27ee      	clr  r30
000186 0000      	nop
000187 9bb0      	sbis __i2c_pin,__sda_bit
000188 9508      	ret
000189 9bb1      	sbis __i2c_pin,__scl_bit
00018a 9508      	ret
00018b d004      	rcall __i2c_delay1
00018c 9ab8      	sbi  __i2c_dir,__sda_bit
00018d d002      	rcall __i2c_delay1
00018e 9ab9      	sbi  __i2c_dir,__scl_bit
00018f e0e1      	ldi  r30,1
                 __i2c_delay1:
000190 e161      	ldi  r22,17
000191 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000192 9ab8      	sbi  __i2c_dir,__sda_bit
000193 9ab9      	sbi  __i2c_dir,__scl_bit
000194 d003      	rcall __i2c_delay2
000195 98b9      	cbi  __i2c_dir,__scl_bit
000196 dff9      	rcall __i2c_delay1
000197 98b8      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000198 e261      	ldi  r22,33
                 __i2c_delay2l:
000199 956a      	dec  r22
00019a f7f1      	brne __i2c_delay2l
00019b 9508      	ret
                 _i2c_read:
00019c e078      	ldi  r23,8
                 __i2c_read0:
00019d 98b9      	cbi  __i2c_dir,__scl_bit
00019e dff1      	rcall __i2c_delay1
                 __i2c_read3:
00019f 9bb1      	sbis __i2c_pin,__scl_bit
0001a0 cffe      	rjmp __i2c_read3
0001a1 dfee      	rcall __i2c_delay1
0001a2 9488      	clc
0001a3 99b0      	sbic __i2c_pin,__sda_bit
0001a4 9408      	sec
0001a5 9ab9      	sbi  __i2c_dir,__scl_bit
0001a6 dff1      	rcall __i2c_delay2
0001a7 1fee      	rol  r30
0001a8 957a      	dec  r23
0001a9 f799      	brne __i2c_read0
0001aa 9179      	ld   r23,y+
0001ab 2377      	tst  r23
0001ac f411      	brne __i2c_read1
0001ad 98b8      	cbi  __i2c_dir,__sda_bit
0001ae c001      	rjmp __i2c_read2
                 __i2c_read1:
0001af 9ab8      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0001b0 dfdf      	rcall __i2c_delay1
0001b1 98b9      	cbi  __i2c_dir,__scl_bit
0001b2 dfe5      	rcall __i2c_delay2
0001b3 9ab9      	sbi  __i2c_dir,__scl_bit
0001b4 dfdb      	rcall __i2c_delay1
0001b5 98b8      	cbi  __i2c_dir,__sda_bit
0001b6 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0001b7 91e9      	ld   r30,y+
0001b8 e078      	ldi  r23,8
                 __i2c_write0:
0001b9 0fee      	lsl  r30
0001ba f410      	brcc __i2c_write1
0001bb 98b8      	cbi  __i2c_dir,__sda_bit
0001bc c001      	rjmp __i2c_write2
                 __i2c_write1:
0001bd 9ab8      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0001be dfd9      	rcall __i2c_delay2
0001bf 98b9      	cbi  __i2c_dir,__scl_bit
0001c0 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
0001c1 9bb1      	sbis __i2c_pin,__scl_bit
0001c2 cffe      	rjmp __i2c_write3
0001c3 dfcc      	rcall __i2c_delay1
0001c4 9ab9      	sbi  __i2c_dir,__scl_bit
0001c5 957a      	dec  r23
0001c6 f791      	brne __i2c_write0
0001c7 98b8      	cbi  __i2c_dir,__sda_bit
0001c8 dfc7      	rcall __i2c_delay1
0001c9 98b9      	cbi  __i2c_dir,__scl_bit
0001ca dfcd      	rcall __i2c_delay2
0001cb e0e1      	ldi  r30,1
0001cc 99b0      	sbic __i2c_pin,__sda_bit
0001cd 27ee      	clr  r30
0001ce 9ab9      	sbi  __i2c_dir,__scl_bit
0001cf cfc0      	rjmp __i2c_delay1
                 
                 _delay_ms:
0001d0 91e9      	ld   r30,y+
0001d1 91f9      	ld   r31,y+
0001d2 9630      	adiw r30,0
0001d3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001d4 ec84     +LDI R24 , LOW ( 0x9C4 )
0001d5 e099     +LDI R25 , HIGH ( 0x9C4 )
                +__DELAY_USW_LOOP :
0001d6 9701     +SBIW R24 , 1
0001d7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x9C4
0001d8 95a8      	wdr
0001d9 9731      	sbiw r30,1
0001da f7c9      	brne __delay_ms0
                 __delay_ms1:
0001db 9508      	ret
                 
                 __ANEGW1:
0001dc 95f1      	NEG  R31
0001dd 95e1      	NEG  R30
0001de 40f0      	SBCI R31,0
0001df 9508      	RET
                 
                 __DIVW21U:
0001e0 2400      	CLR  R0
0001e1 2411      	CLR  R1
0001e2 e190      	LDI  R25,16
                 __DIVW21U1:
0001e3 0faa      	LSL  R26
0001e4 1fbb      	ROL  R27
0001e5 1c00      	ROL  R0
0001e6 1c11      	ROL  R1
0001e7 1a0e      	SUB  R0,R30
0001e8 0a1f      	SBC  R1,R31
0001e9 f418      	BRCC __DIVW21U2
0001ea 0e0e      	ADD  R0,R30
0001eb 1e1f      	ADC  R1,R31
0001ec c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ed 60a1      	SBR  R26,1
                 __DIVW21U3:
0001ee 959a      	DEC  R25
0001ef f799      	BRNE __DIVW21U1
0001f0 01fd      	MOVW R30,R26
0001f1 01d0      	MOVW R26,R0
0001f2 9508      	RET
                 
                 __DIVW21:
0001f3 d012      	RCALL __CHKSIGNW
0001f4 dfeb      	RCALL __DIVW21U
0001f5 f40e      	BRTC __DIVW211
0001f6 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001f7 9508      	RET
                 
                 __MODW21:
0001f8 94e8      	CLT
0001f9 ffb7      	SBRS R27,7
0001fa c004      	RJMP __MODW211
0001fb 95a0      	COM  R26
0001fc 95b0      	COM  R27
0001fd 9611      	ADIW R26,1
0001fe 9468      	SET
                 __MODW211:
0001ff fdf7      	SBRC R31,7
000200 dfdb      	RCALL __ANEGW1
000201 dfde      	RCALL __DIVW21U
000202 01fd      	MOVW R30,R26
000203 f40e      	BRTC __MODW212
000204 dfd7      	RCALL __ANEGW1
                 __MODW212:
000205 9508      	RET
                 
                 __CHKSIGNW:
000206 94e8      	CLT
000207 fff7      	SBRS R31,7
000208 c002      	RJMP __CHKSW1
000209 dfd2      	RCALL __ANEGW1
00020a 9468      	SET
                 __CHKSW1:
00020b ffb7      	SBRS R27,7
00020c c006      	RJMP __CHKSW2
00020d 95a0      	COM  R26
00020e 95b0      	COM  R27
00020f 9611      	ADIW R26,1
000210 f800      	BLD  R0,0
000211 9403      	INC  R0
000212 fa00      	BST  R0,0
                 __CHKSW2:
000213 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   5 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   1 r7 :   1 
r8 :   0 r9 :   1 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   9 r23:   6 
r24:  21 r25:   7 r26:  18 r27:  11 r28:   3 r29:   1 r30: 143 r31:  24 
x  :   3 y  :  40 z  :   7 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   5 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  20 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  21 
cbi   :  27 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   0 cpc   :   0 cpi   :   1 cpse  :   0 dec   :   9 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  23 ld    :  17 ldd   :   5 ldi   :  74 
lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   6 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 or    :   1 
ori   :   0 out   :  42 pop   :   0 push  :   0 rcall :  34 ret   :  17 
reti  :   0 rjmp  :  26 rol   :   4 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  27 sbic  :   3 sbis  :   4 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   0 sts   :   2 sub   :   1 subi  :   2 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000428   1032     32   1064   16384   6.5%
[.dseg] 0x000060 0x000164      0      4      4    1119   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
