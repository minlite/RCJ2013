;/*****************************************************
;Project : AMOS Robocup Junior Soccer 2013
;Version : 3
;Date    : 3/17/2013
;Author  : Miro Markarian and AMOS team
;Company : AMOS
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;// I2C Bus functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __i2c_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
   .equ __sda_bit=0
;PCODE: $0000000F VOL: 0
   .equ __scl_bit=1
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0019 #endasm
;#include <i2c.h>
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;/* Define BUG */
;#define BUG while(1)
;
;/* MUX ADDRESS */
;#define MUXA PORTA.6
;#define MUXB PORTA.7
;#define MUXC PORTD.6
;#define MUXD PORTD.7
;
;/* MUX OUT */
;#define MUXOA PINA.4
;#define MUXOB PINA.5
;
;
;/* MUX PINS*/
;#define LCD 15
;
;/* Define function prototypes so we can use this functions globally */
;int init_robot();
;void write_int(int x, int y, int value);
;void set_mux(int pin);
;int lcd_enabled();
;
;/* Define global variables */
;int rc;
;void main(void)
; 0000 003B {

	.CSEG
;PCODE: $00000012 VOL: 0
; 0000 003C // Declare your local variables here
; 0000 003D 
; 0000 003E // Input/Output Ports initialization
; 0000 003F // Port A initialization
; 0000 0040 // Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0041 // State7=0 State6=0 State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0042 PORTA=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0043 DDRA=0xC0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0044 
; 0000 0045 // Port B initialization
; 0000 0046 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 0047 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=T State0=T
; 0000 0048 PORTB=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0049 DDRB=0x0C;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004A 
; 0000 004B // Port C initialization
; 0000 004C // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
; 0000 004D // State7=T State6=T State5=T State4=T State3=1 State2=T State1=T State0=T
; 0000 004E PORTC=0x08;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 004F DDRC=0x08;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0050 
; 0000 0051 // Port D initialization
; 0000 0052 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0000 0053 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
; 0000 0054 PORTD=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0055 DDRD=0xFC;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0056 
; 0000 0057 // Timer/Counter 0 initialization
; 0000 0058 // Clock source: System Clock
; 0000 0059 // Clock value: 1250.000 kHz
; 0000 005A // Mode: Fast PWM top=0xFF
; 0000 005B // OC0 output: Non-Inverted PWM
; 0000 005C TCCR0=0x6A;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 005D TCNT0=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005E OCR0=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005F 
; 0000 0060 // Timer/Counter 1 initialization
; 0000 0061 // Clock source: System Clock
; 0000 0062 // Clock value: 1250.000 kHz
; 0000 0063 // Mode: Fast PWM top=0x00FF
; 0000 0064 // OC1A output: Non-Inv.
; 0000 0065 // OC1B output: Non-Inv.
; 0000 0066 // Noise Canceler: Off
; 0000 0067 // Input Capture on Falling Edge
; 0000 0068 // Timer1 Overflow Interrupt: Off
; 0000 0069 // Input Capture Interrupt: Off
; 0000 006A // Compare A Match Interrupt: Off
; 0000 006B // Compare B Match Interrupt: Off
; 0000 006C TCCR1A=0xA1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 006D TCCR1B=0x0A;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 006E TCNT1H=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 006F TCNT1L=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0070 ICR1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0071 ICR1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0072 OCR1AH=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0073 OCR1AL=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0074 OCR1BH=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0075 OCR1BL=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0076 
; 0000 0077 // Timer/Counter 2 initialization
; 0000 0078 // Clock source: System Clock
; 0000 0079 // Clock value: Timer2 Stopped
; 0000 007A // Mode: Normal top=0xFF
; 0000 007B // OC2 output: Disconnected
; 0000 007C ASSR=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 007D TCCR2=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007E TCNT2=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 007F OCR2=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0080 
; 0000 0081 // External Interrupt(s) initialization
; 0000 0082 // INT0: Off
; 0000 0083 // INT1: Off
; 0000 0084 // INT2: Off
; 0000 0085 MCUCR=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0086 MCUCSR=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0087 
; 0000 0088 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0089 TIMSK=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 008A 
; 0000 008B // USART initialization
; 0000 008C // USART disabled
; 0000 008D UCSRB=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 008E 
; 0000 008F // Analog Comparator initialization
; 0000 0090 // Analog Comparator: Off
; 0000 0091 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0092 ACSR=0x80;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0093 SFIOR=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0094 
; 0000 0095 // ADC initialization
; 0000 0096 // ADC disabled
; 0000 0097 ADCSRA=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0098 
; 0000 0099 // SPI initialization
; 0000 009A // SPI disabled
; 0000 009B SPCR=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 009C 
; 0000 009D // TWI initialization
; 0000 009E // TWI disabled
; 0000 009F TWCR=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00A0 
; 0000 00A1 // I2C Bus initialization
; 0000 00A2 i2c_init();
;PCODE: $00000057 VOL: 0
; 0000 00A3 
; 0000 00A4 // Alphanumeric LCD initialization
; 0000 00A5 // Connections specified in the
; 0000 00A6 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00A7 // RS - PORTC Bit 0
; 0000 00A8 // RD - PORTC Bit 1
; 0000 00A9 // EN - PORTC Bit 2
; 0000 00AA // D4 - PORTC Bit 4
; 0000 00AB // D5 - PORTC Bit 5
; 0000 00AC // D6 - PORTC Bit 6
; 0000 00AD // D7 - PORTC Bit 7
; 0000 00AE // Characters/line: 16
; 0000 00AF rc = init_robot();
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00B0 if(rc) BUG;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00B1 while (1)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00B2       {
; 0000 00B3       //checksensors();
; 0000 00B4       }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00B5 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;void write_int(int x, int y, int value) {
; 0000 00B6 void write_int(int x, int y, int value) {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00B7 char s[4];
; 0000 00B8 lcd_gotoxy(x,y);
;PCODE: $00000068 VOL: 0
;	x -> Y+8
;	y -> Y+6
;	value -> Y+4
;	s -> Y+0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00B9 sprintf(s, "%4d", value);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00BA lcd_puts(s);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00BB }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;int init_robot() {
; 0000 00BC int init_robot() {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00BD     if(lcd_enabled()) lcd_init(16);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00BE     return 0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00BF }
;PCODE: $0000008B VOL: 0
;void set_mux(int pin) {
; 0000 00C0 void set_mux(int pin) {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C1     MUXD = (pin/8);
;	pin -> Y+0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00C2     MUXC = (pin/8) ^ pin%2;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00C3     MUXB = (pin/8) ^ (pin/2)%2;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00C4     MUXA = (pin/8) ^ (pin/4)%2;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00C5 }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;int lcd_enabled() {
; 0000 00C6 int lcd_enabled() {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00C7     set_mux(LCD);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00C8     return MUXOB;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00C9 }
;PCODE: $000000DC VOL: 0
