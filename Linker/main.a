;/*****************************************************
;Project : AMOS Robocup Junior Soccer 2013
;Version : 3
;Date    : 3/17/2013
;Author  : Miro Markarian and AMOS team
;Company : AMOS
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;// I2C Bus functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __i2c_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
   .equ __sda_bit=0
;PCODE: $0000000F VOL: 0
   .equ __scl_bit=1
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0019 #endasm
;#include <i2c.h>
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;
;/* MUX ADDRESS */
;#define MUXA PORTA.6
;#define MUXB PORTA.7
;#define MUXC PORTD.6
;#define MUXD PORTD.7
;
;/* MUX OUT */
;#define MUXOA PINA.4
;#define MUXOB PINA.5
;
;
;/* MUX PINS*/
;#define LCD 15
;#define STRICT 14
;
;/* Switches varibles */
;int lcd_enabled = 0;
;int strict_set = 0;
;
;/* Define function prototypes so we can use this functions globally */
;int init_robot();
;void write_int(int x, int y, int value);
;void set_mux(int pin);
;int init_sensors();
;void init_switches();
;void bug(int error);
;
;/* Define global variables */
;int rc; // Return Condition
;int workingSensors[18] = {0}; // Working Sensors Array
;int sensors[18] = {1}; // Sensor Values Array

	.DSEG
;int i; // For loop iterator
;
;void main(void)
; 0000 0044 {

	.CSEG
;PCODE: $00000012 VOL: 0
; 0000 0045 // Declare your local variables here
; 0000 0046 
; 0000 0047 // Input/Output Ports initialization
; 0000 0048 // Port A initialization
; 0000 0049 // Func7=Out Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004A // State7=0 State6=0 State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004B PORTA=0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 004C DDRA=0xC0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 004D 
; 0000 004E // Port B initialization
; 0000 004F // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 0050 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=T State0=T
; 0000 0051 PORTB=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0052 DDRB=0x0C;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0053 
; 0000 0054 // Port C initialization
; 0000 0055 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
; 0000 0056 // State7=T State6=T State5=T State4=T State3=1 State2=T State1=T State0=T
; 0000 0057 PORTC=0x08;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0058 DDRC=0x08;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0059 
; 0000 005A // Port D initialization
; 0000 005B // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0000 005C // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
; 0000 005D PORTD=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005E DDRD=0xFC;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 005F 
; 0000 0060 // Timer/Counter 0 initialization
; 0000 0061 // Clock source: System Clock
; 0000 0062 // Clock value: 1250.000 kHz
; 0000 0063 // Mode: Fast PWM top=0xFF
; 0000 0064 // OC0 output: Non-Inverted PWM
; 0000 0065 TCCR0=0x6A;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0066 TCNT0=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0067 OCR0=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0068 
; 0000 0069 // Timer/Counter 1 initialization
; 0000 006A // Clock source: System Clock
; 0000 006B // Clock value: 1250.000 kHz
; 0000 006C // Mode: Fast PWM top=0x00FF
; 0000 006D // OC1A output: Non-Inv.
; 0000 006E // OC1B output: Non-Inv.
; 0000 006F // Noise Canceler: Off
; 0000 0070 // Input Capture on Falling Edge
; 0000 0071 // Timer1 Overflow Interrupt: Off
; 0000 0072 // Input Capture Interrupt: Off
; 0000 0073 // Compare A Match Interrupt: Off
; 0000 0074 // Compare B Match Interrupt: Off
; 0000 0075 TCCR1A=0xA1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0076 TCCR1B=0x0A;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0077 TCNT1H=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0078 TCNT1L=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0079 ICR1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 007A ICR1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 007B OCR1AH=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 007C OCR1AL=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 007D OCR1BH=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 007E OCR1BL=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 007F 
; 0000 0080 // Timer/Counter 2 initialization
; 0000 0081 // Clock source: System Clock
; 0000 0082 // Clock value: Timer2 Stopped
; 0000 0083 // Mode: Normal top=0xFF
; 0000 0084 // OC2 output: Disconnected
; 0000 0085 ASSR=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0086 TCCR2=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0087 TCNT2=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0088 OCR2=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0089 
; 0000 008A // External Interrupt(s) initialization
; 0000 008B // INT0: Off
; 0000 008C // INT1: Off
; 0000 008D // INT2: Off
; 0000 008E MCUCR=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 008F MCUCSR=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0090 
; 0000 0091 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0092 TIMSK=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0093 
; 0000 0094 // USART initialization
; 0000 0095 // USART disabled
; 0000 0096 UCSRB=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0097 
; 0000 0098 // Analog Comparator initialization
; 0000 0099 // Analog Comparator: Off
; 0000 009A // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 009B ACSR=0x80;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 009C SFIOR=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 009D 
; 0000 009E // ADC initialization
; 0000 009F // ADC disabled
; 0000 00A0 ADCSRA=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 00A1 
; 0000 00A2 // SPI initialization
; 0000 00A3 // SPI disabled
; 0000 00A4 SPCR=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00A5 
; 0000 00A6 // TWI initialization
; 0000 00A7 // TWI disabled
; 0000 00A8 TWCR=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00A9 
; 0000 00AA // I2C Bus initialization
; 0000 00AB i2c_init();
;PCODE: $00000057 VOL: 0
; 0000 00AC 
; 0000 00AD // Alphanumeric LCD initialization
; 0000 00AE // Connections specified in the
; 0000 00AF // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B0 // RS - PORTC Bit 0
; 0000 00B1 // RD - PORTC Bit 1
; 0000 00B2 // EN - PORTC Bit 2
; 0000 00B3 // D4 - PORTC Bit 4
; 0000 00B4 // D5 - PORTC Bit 5
; 0000 00B5 // D6 - PORTC Bit 6
; 0000 00B6 // D7 - PORTC Bit 7
; 0000 00B7 // Characters/line: 16
; 0000 00B8 rc = init_robot();
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00B9 if(rc) bug(rc);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00BA while (1)
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00BB       {
; 0000 00BC       //checksensors();
; 0000 00BD       }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00BE }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;void write_int(int x, int y, int value) {
; 0000 00BF void write_int(int x, int y, int value) {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00C0 char s[4];
; 0000 00C1 lcd_gotoxy(x,y);
;PCODE: $00000067 VOL: 0
;	x -> Y+8
;	y -> Y+6
;	value -> Y+4
;	s -> Y+0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00C2 sprintf(s, "%4d", value);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00C3 lcd_puts(s);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00C4 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;int init_robot() {
; 0000 00C5 int init_robot() {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C6     init_switches();
;PCODE: $00000081 VOL: 0
; 0000 00C7     if(lcd_enabled) lcd_init(16);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C8     rc = init_sensors();
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00C9     if(rc) return rc;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00CA     return 0;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00CB }
;PCODE: $00000091 VOL: 0
;void set_mux(int pin) {
; 0000 00CC void set_mux(int pin) {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00CD     MUXD = (pin/8);
;	pin -> Y+0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00CE     MUXC = (pin/8) ^ pin%2;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00CF     MUXB = (pin/8) ^ (pin/2)%2;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00D0     MUXA = (pin/8) ^ (pin/4)%2;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D1 }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;void init_switches(){
; 0000 00D2 void init_switches(){
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00D3     set_mux(LCD);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00D4     lcd_enabled = MUXOB;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00D5     set_mux(STRICT);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00D6     strict_set = MUXOB;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00D7 }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;int init_sensors() {
; 0000 00D8 int init_sensors() {
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00D9     int sensorHolder;
; 0000 00DA     int swtch;
; 0000 00DB     for(i=0;i<18;i++) {
;PCODE: $000000ED VOL: 0
;	sensorHolder -> R16,R17
;	swtch -> R18,R19
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00DC         sensorHolder = i;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00DD         if(i>15) {swtch = 1; sensorHolder = sensorHolder-16;} else {swtch = 0;}
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00DE         set_mux(sensorHolder);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00DF         if((swtch ? MUXOB : MUXOA) == 0) workingSensors[i] = 1;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00E0     }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00E1     if(strict_set) {
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00E2         for(i=0;i<18;i++) {
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00E3         if(workingSensors[i] == 0) return 1;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00E4         }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00E5     }
; 0000 00E6     return 0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00E7 }
;PCODE: $00000142 VOL: 0
;void bug(int error) {
; 0000 00E8 void bug(int error) {
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00E9     if(lcd_enabled) {
;	error -> Y+0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00EA         lcd_puts("BUG on: ");
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00EB         lcd_putchar('0' + error);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00EC     } else {
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00ED         while(1);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00EE }   }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0

	.DSEG
_0x22:
	.BYTE 0x9
